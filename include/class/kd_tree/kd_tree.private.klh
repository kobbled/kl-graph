%ifndef kdtree_private_h
%define kdtree_private_h

%include namespace.m

declare_member(class_name,reset_generator,class_name,rgen)
ROUTINE reset_generator FROM class_name
declare_member(class_name,clear_query,class_name,cqry)
ROUTINE clear_query FROM class_name
declare_member(class_name,new_node,class_name,nnde)
ROUTINE new_node(idx : INTEGER) FROM class_name
declare_member(class_name,bubblesort,class_name,bsrt)
ROUTINE bubblesort(list : PATH nodedata = KDTREE_DATA_TYPE; low, high : INTEGER; axs : INTEGER) FROM class_name
declare_member(class_name,insert,class_name,inst)
ROUTINE insert(data_start, data_end : INTEGER; depth : INTEGER ; &
               data : PATH nodedata = KDTREE_DATA_TYPE ) : INTEGER FROM class_name
declare_member(class_name,inorder,class_name,iodr)
ROUTINE inorder(idx : INTEGER) FROM class_name
declare_member(class_name,preorder,class_name,pedr)
ROUTINE preorder(idx : INTEGER) FROM class_name
declare_member(class_name,postorder,class_name,podr)
ROUTINE postorder(idx : INTEGER) FROM class_name
declare_member(class_name,minmaxUtil,class_name,mnmu)
ROUTINE minmaxUtil(root : INTEGER ; depth : INTEGER ; dim : INTEGER ; &
                   mn_mx : INTEGER ; data : PATH nodedata = KDTREE_DATA_TYPE) : INTEGER FROM class_name
declare_member(class_name,kNN,class_name,kNN)
ROUTINE kNN(root : INTEGER ; depth : INTEGER ; point : KDTREE_DATA_TYPE ; &
            data : PATH nodedata = KDTREE_DATA_TYPE) FROM class_name
declare_member(class_name,rNN,class_name,rNN)
ROUTINE rNN(root : INTEGER ; depth : INTEGER ; radius : REAL ; &
            point : KDTREE_DATA_TYPE ; data : PATH nodedata = KDTREE_DATA_TYPE) FROM class_name
%endif --kdtree_private_h