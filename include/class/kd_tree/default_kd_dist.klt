
%define KD_CONFIG_FILE default_kd_dist.klt

%define KDTREE_DATA_TYPE t_VECTOR
%define KDTREE_NODE_NAME v
%define KDTREE_VALUE_TYPE VECTOR
%defeval KDTREE_COMPARE_TYPE REAL
%define KDTREE_MAX_DIST 1.E6

%define KDTREE_QUERY_TYPE T_KDQUEUE

%define DIMENSIONS 2

--hash table
------------------
%defeval HASH_CLASS_NAME hshint
%include hashint.klt

%mode push
%mode string QQQ "`" "`" "\\"
%define define_hash(object_name,cnfg_file) `%class object_name('hashpath.klc','hashpath.klh','cnfg_file')`
%mode pop
------------------

%mode push
%mode string QQQ "`" "`" "\\"

%define define_kd_headers(parent) `declare_member(parent,user_print,parent,upnt)
ROUTINE user_print(nde : KDTREE_DATA_TYPE) FROM parent
declare_member(parent,user_string,parent,ustr)
ROUTINE user_string(nde : KDTREE_DATA_TYPE) : STRING FROM parent
declare_member(parent,distance,parent,dist)
ROUTINE distance(point : KDTREE_DATA_TYPE ; nde : KDTREE_DATA_TYPE) : KDTREE_COMPARE_TYPE FROM parent
declare_member(parent,query_filter,parent,qftr)
ROUTINE query_filter(l_val : KDTREE_DATA_TYPE; r_val : KDTREE_DATA_TYPE) : BOOLEAN FROM parent
`

%define define_kd_members(parent) `declare_member(parent,user_print,parent,upnt)
ROUTINE user_print(nde : KDTREE_DATA_TYPE)
  BEGIN
    WRITE TPDISPLAY(nde.KDTREE_NODE_NAME::5::2)
  END user_print
declare_member(parent,user_string,parent,ustr)
ROUTINE user_string(nde : KDTREE_DATA_TYPE) : STRING
  BEGIN
    RETURN(vec_to_s(nde.KDTREE_NODE_NAME,','))
  END user_string
declare_member(parent,distance,parent,dist)
ROUTINE distance(point : KDTREE_DATA_TYPE ; nde : KDTREE_DATA_TYPE) : KDTREE_COMPARE_TYPE
  BEGIN
    RETURN(math__norm(nde.KDTREE_NODE_NAME - point.KDTREE_NODE_NAME))
  END distance
declare_member(parent,query_filter,parent,qftr)
ROUTINE query_filter(l_val : KDTREE_DATA_TYPE; r_val : KDTREE_DATA_TYPE) : BOOLEAN
  BEGIN
    RETURN(distance(l_val, r_val) > 0)
  END query_filter
  `
%mode pop