
%define KDTREE_DATA_TYPE t_VECTOR
%define KDTREE_VALUE_TYPE VECTOR
%define KDTREE_COMPARE_TYPE REAL
%define KDTREE_NODE_NAME v
%define KDTREE_MAX_DIST 1.E6

%define DIMENSIONS 2

%mode push
%mode string QQQ "`" "`" "\\"

%define define_kd_headers(parent) `declare_member(parent,comparator,parent,cmpr)
ROUTINE comparator(l_val : KDTREE_DATA_TYPE; r_val : KDTREE_DATA_TYPE; axs : INTEGER) : INTEGER FROM parent
declare_member(parent,user_print,parent,upnt)
ROUTINE user_print(nde : KDTREE_DATA_TYPE) FROM parent
declare_member(parent,distance,parent,dist)
ROUTINE distance(point : KDTREE_DATA_TYPE ; nde : KDTREE_DATA_TYPE) : KDTREE_COMPARE_TYPE FROM parent
declare_member(parent,inhypersphere,parent,ihyp)
ROUTINE inhypersphere(dist : KDTREE_COMPARE_TYPE ; point : KDTREE_DATA_TYPE ; &
                      plane : KDTREE_DATA_TYPE ; axs : INTEGER) : BOOLEAN FROM parent
`

%define define_kd_members(parent) `declare_member(parent,comparator,parent,cmpr)
--comparator codes in binary_tree.klt
ROUTINE comparator(l_val : KDTREE_DATA_TYPE; r_val : KDTREE_DATA_TYPE; axs : INTEGER) : INTEGER
  VAR
    r1, r2 : KDTREE_COMPARE_TYPE
  BEGIN
    SELECT axs OF
      CASE(1):
        r1 = l_val.KDTREE_NODE_NAME.x ; r2 = r_val.KDTREE_NODE_NAME.x ;
      CASE(2):
        r1 = l_val.KDTREE_NODE_NAME.y ; r2 = r_val.KDTREE_NODE_NAME.y ;
      CASE(3):
        r1 = l_val.KDTREE_NODE_NAME.z ; r2 = r_val.KDTREE_NODE_NAME.z ;
      ELSE:
    ENDSELECT
    
    IF r1 > r2 THEN
      RETURN(GREATER_THAN)
    ENDIF
    IF r1 < r2 THEN
      RETURN(LESS_THAN)
    ENDIF
    IF r1 = r2 THEN
      RETURN(EQUAL_TO)
    ENDIF

    RETURN(0)
  END comparator
declare_member(parent,user_print,parent,upnt)
ROUTINE user_print(nde : KDTREE_DATA_TYPE)
  BEGIN
    WRITE TPDISPLAY(nde.KDTREE_NODE_NAME::5::2)
  END user_print
declare_member(parent,distance,parent,dist)
ROUTINE distance(point : KDTREE_DATA_TYPE ; nde : KDTREE_DATA_TYPE) : KDTREE_COMPARE_TYPE
  BEGIN
    RETURN(math__norm(nde.KDTREE_NODE_NAME - point.KDTREE_NODE_NAME))
  END distance
declare_member(parent,inhypersphere,parent,ihyp)
ROUTINE inhypersphere(dist : KDTREE_COMPARE_TYPE ; point : KDTREE_DATA_TYPE ; &
                      plane : KDTREE_DATA_TYPE ; axs : INTEGER) : BOOLEAN
  BEGIN
    SELECT axs OF
      CASE(1):
        -- check overlap on left subtree
        IF (point.KDTREE_NODE_NAME.x - dist) <= plane.KDTREE_NODE_NAME.x THEN
          RETURN(TRUE)
        -- check overlap on right subtree
        ELSE IF (point.KDTREE_NODE_NAME.x + dist) > plane.KDTREE_NODE_NAME.x THEN
          RETURN(TRUE)
        ENDIF
        ENDIF
      CASE(2):
        -- check overlap on left subtree
        IF (point.KDTREE_NODE_NAME.y - dist) <= plane.KDTREE_NODE_NAME.y THEN
          RETURN(TRUE)
        -- check overlap on right subtree
        ELSE IF (point.KDTREE_NODE_NAME.y + dist) > plane.KDTREE_NODE_NAME.y THEN
          RETURN(TRUE)
        ENDIF
        ENDIF
      CASE(3):
        -- check overlap on left subtree
        IF (point.KDTREE_NODE_NAME.z - dist) <= plane.KDTREE_NODE_NAME.z THEN
          RETURN(TRUE)
        -- check overlap on right subtree
        ELSE IF (point.KDTREE_NODE_NAME.z + dist) > plane.KDTREE_NODE_NAME.z THEN
          RETURN(TRUE)
        ENDIF
        ENDIF
      ELSE:
    ENDSELECT

    RETURN(FALSE)

  END inhypersphere
  `
%mode pop