PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'TSP algorithms'
%NOLOCKGROUP
%UNINITVARS

%include namespace.m

%include errors.klt
%include systemlib.klt
%include systemvars.klt

%include kd_tree.klt
define_kd_types(KD_CLASS_NAME,KDTREE_COMPARE_TYPE)
%include graph.klt
graph_type_define(GRAPH_CLASS_NAME)

%define BASE_CLASSNAME class_name

VAR
  data : PATH nodedata = TSP_DATA_TYPE
  visited : PATH nodedata = t_BOOL
  tracked : PATH nodedata = TRACKED_TYPE
  frm : XYZWPR

%include errors.klh
%from strings.klh %import i_to_s

--kd tree
define_kdtree(KD_CLASS_NAME,TSP_CONFIG_FILE)
define_kd_headers(KD_CLASS_NAME)
--graph
define_graph_class(GRAPH_CLASS_NAME,TSP_CONFIG_FILE)
define_graphs_headers(GRAPH_CLASS_NAME)

%defeval class_name BASE_CLASSNAME

%include tsp.klh
%include tsp.private.klh

-- **** MUST BE DEFINED IN TEMPLATE FILE (.klt)
define_tsp_members(class_name)

--private

ROUTINE clear_data
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(data)
    WHILE PATH_LEN(data) > 0 DO
		  DELETE_NODE(data,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_data

ROUTINE clear_visited
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(visited)
    WHILE PATH_LEN(visited) > 0 DO
		  DELETE_NODE(visited,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_visited

ROUTINE reset_visited
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(visited) DO
      visited[i].v = FALSE
    ENDFOR
  END reset_visited

  ROUTINE clear_tracked
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(tracked)
    WHILE PATH_LEN(tracked) > 0 DO
		  DELETE_NODE(tracked,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_tracked

ROUTINE init_tracked
  VAR
    i,status : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(tracked) DO
      tracked[i].prev_node = 0
      tracked[i].cost_so_far = GRAPH_MAX_COST
    ENDFOR
  END init_tracked

ROUTINE update_unvisited
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(data) DO
      IF visited[i].v = FALSE THEN
        tracked[i].cost_so_far = dist_to_weight(`KD_CLASS_NAME`__distance(nde, data[i]))
      ELSE
        tracked[i].cost_so_far = GRAPH_MAX_COST
      ENDIF
    ENDFOR
  END update_unvisited

ROUTINE min_tracked
  VAR
    i : INTEGER
    adj_list : GRAPH_ADJ_LIST_NAME
    min_val : GRAPH_EDGE_VTYPE
    min_idx : INTEGER
  BEGIN
    --get adjacency list
    adj_list = `GRAPH_CLASS_NAME`__get_adjacencies(nde_i)

    min_val = GRAPH_MAX_COST
    min_idx = 0

    i = 1
    --first look in adjacency list, and find edge with the
    --lowest cost.
    IF (NOT UNINIT(adj_list[i].GRAPH_NODE_NAME)) THEN
    REPEAT
      IF (visited[adj_list[i].GRAPH_NODE_NAME].v = FALSE) AND &
         (adj_list[i].GRAPH_EDGE_NAME < min_val) THEN
        min_val = adj_list[i].GRAPH_EDGE_NAME
        min_idx = adj_list[i].GRAPH_NODE_NAME
      ENDIF
      i = i + 1
    UNTIL(UNINIT(adj_list[i].GRAPH_NODE_NAME) OR (i = ARRAY_LEN(adj_list)) )
    ENDIF

    --If adjacency list is empty, or all nodes have been visited
    --find next nearest neighbor that has not been visited
    IF NOT (min_val < GRAPH_MAX_COST) THEN
      update_unvisited(data[nde_i])

      FOR i=1 TO PATH_LEN(tracked) DO
        IF (visited[i].v = FALSE) AND (tracked[i].cost_so_far < min_val) THEN
          min_val = tracked[i].cost_so_far
          min_idx = i
        ENDIF
      ENDFOR
    ENDIF

    RETURN(min_idx)
  END min_tracked

--public

ROUTINE new
  BEGIN
    --clear paths
    clear_data
    clear_visited
    clear_tracked

    frm = coord_frame
  END new

ROUTINE init
  VAR
    i, status : INTEGER
  BEGIN
    --clear paths
    clear_data
    clear_visited
    clear_tracked
    --initialize members
    frm = coord_frame
    COPY_PATH(d, 0, 0, data, status)

    --build tracked and visited
    FOR i=1 TO PATH_LEN(d) DO
      APPEND_NODE(visited,status)
      APPEND_NODE(tracked,status)
      CHK_STAT(status)
    ENDFOR

  END init

ROUTINE destructor
  BEGIN
    clear_data
    clear_visited
    clear_tracked

    `KD_CLASS_NAME`__clear
    `GRAPH_CLASS_NAME`__destructor
  END destructor

ROUTINE append
  VAR
    status : INTEGER
  BEGIN
    APPEND_NODE(data,status)
    CHK_STAT(status)
    data[PATH_LEN(data)].TSP_DATA_NAME = nde

    --add visited node
    APPEND_NODE(visited,status)
    visited[PATH_LEN(visited)].v = FALSE

    --add tracked node
    APPEND_NODE(tracked,status)
    tracked[PATH_LEN(tracked)].prev_node = 0
    tracked[PATH_LEN(tracked)].cost_so_far = GRAPH_MAX_COST
  END append

ROUTINE get_data
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(data, 0, 0, out_data, status)
    CHK_STAT(status)
  END get_data

ROUTINE MST
  VAR
    i,j : INTEGER
    u : INTEGER
    new_cost : GRAPH_EDGE_VTYPE
    status : INTEGER
  BEGIN
    IF UNINIT(start_node) OR (start_node = 0) THEN start_node = 1 ; ENDIF

    reset_visited
    init_tracked

    --add start node to path and mark as visited
    APPEND_NODE(out_pth, status)
    out_pth[PATH_LEN(out_pth)].v = start_node
    visited[start_node].v = TRUE

    u = start_node
    FOR i=1 TO PATH_LEN(data) DO
      --pick node with the minimum weight in adjacency list.
      --if no edges, or all adjacencies have been visisted find
      --the next unvisited nearest neighbor
      u = min_tracked(u)
      
      IF u > 0 THEN
        --mark as visited
        visited[u].v = TRUE

        --add to path list
        APPEND_NODE(out_pth, status)
        out_pth[PATH_LEN(out_pth)].v = u
      ENDIF
    ENDFOR

  END MST


ROUTINE NN_graph
  VAR
    neigh : ARRAY[TSP_GRAPH_MAX_NEIGHBORS] OF T_KTQUEUE
    prnt, child :  GRAPH_ADJ_TYPE
    i,j : INTEGER
  BEGIN
    --create kd tree
    `KD_CLASS_NAME`__create(data, (frm))
    --data needs to be sorted in kd tree. copy sorted path
    --to retrieve correct indicies while graphing.
    `KD_CLASS_NAME`__copy_data(data)

    --initalize graph
    `GRAPH_CLASS_NAME`__new(PATH_LEN(data),TRUE)
    
    --Find kth nearest neighbors for all nodes and build out graph
    FOR i=1 TO PATH_LEN(data) DO
      `KD_CLASS_NAME`__kth_nearest_neighbors(data[i], k)
      `KD_CLASS_NAME`__get_query_idx(neigh)

      prnt = `GRAPH_CLASS_NAME`__new_node(i)
      j=1
      --add all neighbors as weighted edged to graph
      IF (NOT UNINIT(neigh[j].idx)) THEN
      REPEAT
        child = `GRAPH_CLASS_NAME`__new_node(neigh[j].idx)
        `GRAPH_CLASS_NAME`__addEdge(prnt, child, dist_to_weight(neigh[j].value))
        j = j + 1
      UNTIL(UNINIT(neigh[j].idx) OR (j = TSP_GRAPH_MAX_NEIGHBORS ) )
      ENDIF
    ENDFOR

  END NN_graph

BEGIN
END class_name