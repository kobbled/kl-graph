PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'graph class'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%defeval BASE_CLASSNAME class_name

%include systemlib.macros.klt
%include systemlib.types.klt

%include errors.klt

--define graph types
%include graph.klt
--user graph type
graph_type_define(class_name)


--for A* search
%ifdef INCLUDE_A_STAR
--priority queue types
queue_type_define(FRONTIER_NAME)
%endif

%defeval class_name BASE_CLASSNAME

VAR
  this : PATH pathheader = hdr_graph, nodedata = GRAPH_TYPE
  visited : PATH nodedata = t_BOOL
%ifdef GRAPH_EDGE_NAME
  tracked : PATH nodedata = TRACKED_TYPE
%endif

%include errors.klh
%from strings.klh %import i_to_s

--abstract data structures
%ifdef INCLUDE_A_STAR
--priority queue
define_priority_queue(FRONTIER_NAME,CONFIG_FILENAME)
%endif

%defeval class_name BASE_CLASSNAME
-- graph class members
%include graph.klh
%include graph.private.klh

-- **** MUST BE DEFINED IN TEMPLATE FILE (.klt)
define_graph_members(class_name)

--private

ROUTINE clear_graph
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(this)
    WHILE PATH_LEN(this) > 0 DO
		  DELETE_NODE(this,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_graph

ROUTINE clear_visited
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(visited)
    WHILE PATH_LEN(visited) > 0 DO
		  DELETE_NODE(visited,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_visited

ROUTINE reset_visited
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(visited) DO
      visited[i].v = FALSE
    ENDFOR
  END reset_visited

%ifdef GRAPH_EDGE_NAME
--append for weighted graphs
ROUTINE insert_adj
  VAR
    i,j : INTEGER
    b : BOOLEAN
  BEGIN
    b = FALSE
    i = 1
    IF NOT UNINIT(this[id].adj[i].GRAPH_NODE_NAME) THEN
    REPEAT
      --if node is already added. check weight. replace if new
      --edge is lower.
      IF (data.GRAPH_NODE_NAME = this[id].adj[i].GRAPH_NODE_NAME) THEN 
        IF (data.GRAPH_EDGE_NAME < this[id].adj[i].GRAPH_EDGE_NAME) THEN
          this[id].adj[i] = data
        ENDIF
        b = TRUE
      ENDIF
      i = i + 1
    UNTIL(UNINIT(this[id].adj[i].GRAPH_NODE_NAME) OR (i = ARRAY_LEN(this[id].adj)) )
    ENDIF

    IF (i = ARRAY_LEN(this[id].adj)) AND (NOT b) THEN
      -- no free slot in adjacency list
      karelError(INVALID_INDEX,'class_name node ' + i_to_s(id) + ' adjacency list is full.', ER_ABORT)
    ENDIF

    --add weight at end of array if new edge.
    IF NOT b THEN
      this[id].adj[i] = data
    ENDIF

  END insert_adj
%else
--append for unweighted graphs
ROUTINE insert_adj
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(this[id].adj) DO
      IF (UNINIT(this[id].adj[i].GRAPH_NODE_NAME)) THEN
        this[id].adj[i] = data
        RETURN
      ELSE IF (data.GRAPH_NODE_NAME = this[id].adj[i].GRAPH_NODE_NAME) THEN
        RETURN
      ENDIF
      ENDIF
    ENDFOR

    -- no free slot in adjacency list
    karelError(INVALID_INDEX,'class_name node ' + i_to_s(id) + ' adjacency list is full.', ER_ABORT)
  END insert_adj
%endif

ROUTINE DFSUtil
  VAR
    i : INTEGER
    status : INTEGER
    adj : GRAPH_ADJ_TYPE
  BEGIN
    vistd[nde].v = TRUE
    --add to path
    APPEND_NODE(out_pth, status)
    out_pth[PATH_LEN(out_pth)].v = nde

    i = 1
    adj = grph[nde].adj[i]
    WHILE (NOT UNINIT(adj.GRAPH_NODE_NAME)) DO
      IF (vistd[adj.GRAPH_NODE_NAME].v = FALSE) THEN
        DFSUtil((adj.GRAPH_NODE_NAME), grph, vistd, out_pth)
      ENDIF

      i = i + 1
      IF i > ARRAY_LEN(grph[nde].adj) THEN
        RETURN
      ENDIF

      adj = grph[nde].adj[i]
    ENDWHILE
  END DFSUtil

%ifdef GRAPH_EDGE_NAME
ROUTINE clear_tracked
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(tracked)
    WHILE PATH_LEN(tracked) > 0 DO
		  DELETE_NODE(tracked,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_tracked

ROUTINE init_tracked
  VAR
    i,status : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(tracked) DO
      tracked[i].prev_node = 0
      tracked[i].cost_so_far = GRAPH_MAX_COST
    ENDFOR
  END init_tracked

ROUTINE min_tracked
  VAR
    i : INTEGER
    min_val : GRAPH_EDGE_VTYPE
    min_idx : INTEGER
  BEGIN
    min_val = GRAPH_MAX_COST

    i = 1
    --first look in adjacency list, and find edge with the
    --lowest cost.
    IF (NOT UNINIT(adj_arr[i].GRAPH_NODE_NAME)) THEN
    REPEAT
      IF (visited[adj_arr[i].GRAPH_NODE_NAME].v = FALSE) AND &
         (adj_arr[i].GRAPH_EDGE_NAME < min_val) THEN
        min_val = adj_arr[i].GRAPH_EDGE_NAME
        min_idx = adj_arr[i].GRAPH_NODE_NAME
      ENDIF
      i = i + 1
    UNTIL(UNINIT(adj_arr[i].GRAPH_NODE_NAME) OR (i = MAX_NEIGHBORS ) )
    ENDIF

    --If adjacency list is empty, or all nodes have been visited look in
    --tracked list an unvisted node with the lost path cost from the start
    --node
    IF NOT (min_val < GRAPH_MAX_COST) THEN
      FOR i=1 TO PATH_LEN(tracked) DO
        IF (visited[i].v = FALSE) AND (tracked[i].cost_so_far < min_val) THEN
          min_val = tracked[i].cost_so_far
          min_idx = i
        ENDIF
      ENDFOR
    ENDIF

    RETURN(min_idx)
  END min_tracked
%endif

%ifdef INCLUDE_A_STAR

ROUTINE reconstruct_path
  VAR
    current : INTEGER
    status : INTEGER
  BEGIN
    current = final_node
    APPEND_NODE(pth, status)

    REPEAT
      INSERT_NODE(pth, 1, status)
      pth[1].v = current

      --get previous node
      current = tracked[current].prev_node

    UNTIL(current = 0)

  END reconstruct_path
%endif

-- public

ROUTINE new
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    clear_graph
    clear_visited
%ifdef GRAPH_EDGE_NAME
    clear_tracked
%endif

    FOR i=1 TO no_of_verts DO
      append
    ENDFOR

    --add header information
    this.directional = directional
  END new

ROUTINE delete
  BEGIN
    clear_graph
    clear_visited
%ifdef GRAPH_EDGE_NAME
    clear_tracked
%endif
  END delete

ROUTINE append
  VAR
    status : INTEGER
  BEGIN
    APPEND_NODE(this,status)
    CHK_STAT(status)
    --add visited node
    APPEND_NODE(visited,status)
    visited[PATH_LEN(visited)].v = FALSE
%ifdef GRAPH_EDGE_NAME
    --add tracked node
    APPEND_NODE(tracked,status)
%endif
    CHK_STAT(status)
  END append

ROUTINE is_neighbor
  VAR
    i : INTEGER
    adj : GRAPH_ADJ_TYPE
  BEGIN
    i = 1
    FOR i=1 TO ARRAY_LEN(this[nde].adj) DO
      adj = this[nde].adj[i]
      IF (UNINIT(adj.GRAPH_NODE_NAME)) THEN
        RETURN(FALSE)
      ENDIF

      IF adj.GRAPH_NODE_NAME = neighbor THEN
        RETURN(TRUE)
      ENDIF
    ENDFOR

    RETURN(FALSE)
  END is_neighbor

ROUTINE list_neighbors
  VAR
    neighbors : ARRAY[MAX_NEIGHBORS] OF INTEGER
    i : INTEGER
    adj : GRAPH_ADJ_TYPE
  BEGIN
    i = 1
    adj = this[nde].adj[i]
    WHILE (NOT UNINIT(adj.GRAPH_NODE_NAME)) DO
      neighbors[i] = adj.GRAPH_NODE_NAME

      i = i + 1
      IF i > ARRAY_LEN(this[nde].adj) THEN
        RETURN(neighbors)
      ENDIF

      adj = this[nde].adj[i]
    ENDWHILE

    RETURN(neighbors)
  END list_neighbors

ROUTINE get_adjacencies
  BEGIN
    RETURN(this[nde].adj)
  END get_adjacencies

ROUTINE put_adjacencies
  BEGIN
    this[nde].adj = adj
  END put_adjacencies

ROUTINE change_directional
  BEGIN
    this.directional = dir
  END change_directional

ROUTINE DFS
  VAR
    i : INTEGER
  BEGIN
    reset_visited

    IF start_node > 0 THEN
      IF start_node > PATH_LEN(this) THEN
        karelError(INVALID_INDEX,'node ' + i_to_s(start_node) + ' is not in graph.', ER_ABORT)
      ENDIF

      IF (NOT visited[start_node].v) THEN
        DFSUtil(start_node, this, visited, pth)
      ENDIF
      
    ELSE

      FOR i=1 TO PATH_LEN(this) DO
        IF (NOT visited[i].v) THEN
          DFSUtil(i, this, visited, pth)
        ENDIF
      ENDFOR
    
    ENDIF

    -- return(out_pth)

  END DFS

ROUTINE BFS
  VAR
    i : INTEGER
    v : INTEGER
    adj : GRAPH_ADJ_TYPE
    status : INTEGER
  BEGIN
    IF UNINIT(start_node) OR (start_node = 0) THEN start_node = 1 ; ENDIF 

    reset_visited
    --clear queue
    i = PATH_LEN(queue)
    WHILE PATH_LEN(queue) > 0 DO
		  DELETE_NODE(queue,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE


    visited[start_node].v = TRUE
    --push first node onto queue
    APPEND_NODE(queue,status)
    queue[PATH_LEN(queue)].v = start_node

    REPEAT
      --next node from queue
      v = queue[1].v
      DELETE_NODE(queue,1,status)

      --add to path list
      APPEND_NODE(pth, status)
      pth[PATH_LEN(pth)].v = v

      --if reach goal abort
      IF (v=goal) THEN
        RETURN
      ENDIF

      --get neighbors of the popped node
      i = 1
      adj = this[v].adj[i]
      REPEAT
        --if adjacent node has not been visited 
        --add to queue
        IF (NOT visited[ adj.GRAPH_NODE_NAME ].v) THEN
          visited[ adj.GRAPH_NODE_NAME ].v = TRUE
          --push node on queue
          APPEND_NODE(queue,status)
          queue[PATH_LEN(queue)].v = (adj.GRAPH_NODE_NAME)
        ENDIF

        i = i + 1
        IF i > ARRAY_LEN(this[v].adj) THEN
          karelError(INVALID_INDEX,'increase MAX-NEIGHBORS in class_name', ER_ABORT)
        ENDIF
        adj = this[v].adj[i]
      --repeat until adjacency list is null
      UNTIL(UNINIT(adj.GRAPH_NODE_NAME) )

    -- repeat until queue is empty
    UNTIL(PATH_LEN(queue) = 0)

  END BFS

%ifdef GRAPH_EDGE_NAME
--minimum spanning tree uses prims algorithm
--(ref: https://www.geeksforgeeks.org/prims-minimum-spanning-tree-mst-greedy-algo-5/)
ROUTINE MST
  VAR
    i,j : INTEGER
    u : INTEGER
    adj_list : GRAPH_ADJ_LIST_NAME
    new_cost : GRAPH_EDGE_VTYPE
    status : INTEGER
  BEGIN
    IF UNINIT(start_node) OR (start_node = 0) THEN start_node = 1 ; ENDIF

    reset_visited
    --initialize tracking dictionary
    init_tracked

    --make start_node 0 cost so that it is picked first
    tracked[start_node].prev_node = 0
    tracked[start_node].cost_so_far = 0
    --adj_list is unintialized for first iteration so min_tracked
    --will be taken from tracked list

    FOR i=1 TO PATH_LEN(this) DO
      --pick node with the minimum weight in adjacency list.
      --if no edges, or all adjacencies have been visisted choose
      --next node with lowest cost so far
      u = min_tracked(adj_list)
      --mark as visited
      visited[u].v = TRUE
      
      --add to path list
      APPEND_NODE(pth, status)
      pth[PATH_LEN(pth)].v = u

      --update cost so far for all adjacencies
      adj_list = this[u].adj
      j = 1
      REPEAT
        new_cost = tracked[u].cost_so_far + adj_list[j].GRAPH_EDGE_NAME
        IF (visited[adj_list[j].GRAPH_NODE_NAME].v = FALSE) AND &
           (new_cost < tracked[adj_list[j].GRAPH_NODE_NAME].cost_so_far) THEN
           --update tracked list
          tracked[adj_list[j].GRAPH_NODE_NAME].prev_node = u
          tracked[adj_list[j].GRAPH_NODE_NAME].cost_so_far = new_cost
        ENDIF

        j = j + 1
        --repeat until adjacency list is null
      UNTIL(UNINIT(adj_list[j].GRAPH_NODE_NAME) )
    ENDFOR

    -- return pth
  END MST
%endif

%ifdef INCLUDE_A_STAR
ROUTINE dijkstra_search
  VAR
    current : INTEGER
    i : INTEGER
    adj : GRAPH_ADJ_TYPE
    new_cost : GRAPH_EDGE_VTYPE
    b : BOOLEAN
  BEGIN
    --initialize frontier
    `FRONTIER_NAME`__init
    --put start node on frontier
    `FRONTIER_NAME`__push(start_node, 0)
    --initialize tracking dictionary
    reset_visited
    init_tracked
    -- add start node to dict
    tracked[start_node].prev_node = 0
    tracked[start_node].cost_so_far = 0
    visited[start_node].v = TRUE

    REPEAT
      --get next node from priority queue
      current = `FRONTIER_NAME`__pop_min

      IF current = goal THEN
        --reconstruct path from tracking list
        reconstruct_path(goal, pth)
        RETURN
      ENDIF

      --loop through adjacency list to see if node is untracked
      --or has a lower cost than the previous path with this
      --frontier node
      i = 1
      adj = this[current].adj[i]
      REPEAT

        --calculate cost of path from start_node->current->adj
        new_cost = tracked[current].cost_so_far + adj.GRAPH_EDGE_NAME

        --get cost so far of frontier node
        b = FALSE
        IF (visited[adj.GRAPH_NODE_NAME].v = FALSE) THEN 
          b = TRUE
        ELSE IF (new_cost < tracked[adj.GRAPH_NODE_NAME].cost_so_far) THEN
          b = TRUE
        ENDIF
        ENDIF

        IF b THEN
          --update cost and previous node in tracking dictionary
          tracked[adj.GRAPH_NODE_NAME].prev_node = current
          tracked[adj.GRAPH_NODE_NAME].cost_so_far = new_cost
          visited[adj.GRAPH_NODE_NAME].v = TRUE

          --put node and cost on frontier
          `FRONTIER_NAME`__push((adj.GRAPH_NODE_NAME), (new_cost))
        ENDIF

        i = i + 1
        IF i > ARRAY_LEN(this[current].adj) THEN
          karelError(INVALID_INDEX,'increase MAX-NEIGHBORS in class_name', ER_ABORT)
        ENDIF
        adj = this[current].adj[i]
        --repeat until adjacency list is null
      UNTIL(UNINIT(adj.GRAPH_NODE_NAME) )

    UNTIL(`FRONTIER_NAME`__empty)

    reconstruct_path(current, pth)
    karelError(INVALID_INDEX,'class_name did not find goal', ER_WARN)

  END dijkstra_search

%endif

BEGIN
END class_name
