--header
%include header_guard.m
--oop
%include namespace.m

--start header file
header_if -- ifndef class
header_def -- define class

declare_member(class_name,new,class_name,new)
ROUTINE new(no_of_verts : INTEGER; directional : BOOLEAN) FROM class_name
declare_member(class_name,destructor,class_name,dsct)
ROUTINE destructor FROM class_name
declare_member(class_name,append,class_name,ande)
ROUTINE append FROM class_name
declare_member(class_name,is_neighbor,class_name,neig)
ROUTINE is_neighbor(nde : INTEGER; neighbor : INTEGER) : BOOLEAN FROM class_name
declare_member(class_name,list_neighbors,class_name,lstn)
ROUTINE list_neighbors(nde : INTEGER) : ARRAY OF INTEGER FROM class_name
declare_member(class_name,get_adjacencies,class_name,gadj)
ROUTINE get_adjacencies(nde : INTEGER) : ADJ_ARR_TYPE FROM class_name
declare_member(class_name,put_adjacencies,class_name,padj)
ROUTINE put_adjacencies(nde : INTEGER ; adj : ADJ_ARR_TYPE) FROM class_name
declare_member(class_name,DFS,class_name,dfs)
-- start_node = 0 will perform on entire graph
ROUTINE DFS(start_node : INTEGER ; pth : PATH nodedata = t_INTEGER) FROM class_name
declare_member(class_name,BFS,class_name,bfs)
ROUTINE BFS(start_node : INTEGER ; goal : INTEGER; queue : PATH nodedata = t_INTEGER ; & 
            pth : PATH nodedata = t_INTEGER) FROM class_name
%ifdef GRAPH_EDGE_NAME
declare_member(class_name,MST,class_name,mst)
ROUTINE MST(start_node : INTEGER; pth : PATH nodedata = t_INTEGER) FROM class_name
%endif
%ifdef INCLUDE_A_STAR
declare_member(class_name,dijkstra_search,class_name,dks)
ROUTINE dijkstra_search(start_node : INTEGER ; goal : INTEGER; &
                        pth : PATH nodedata = t_INTEGER) FROM class_name
%endif

%endif --end header