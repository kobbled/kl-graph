%define CONFIG_FILENAME default_graph_weight.klt
--maximum number of adjacencies per node
%define MAX_NEIGHBORS 5

%define GRAPH_TYPE t_graph_wt
%define GRAPH_NODE_NAME id
%define GRAPH_NODE_TYPE SHORT
--SHORT and BYTE types must be passed as INTEGER
--into routines
%define GRAPH_NODE_VTYPE INTEGER

%define GRAPH_ADJ_TYPE t_edge_wt
--optional: exclude if not using edge weights
--must update adjacency type to exclude
--weights
%define GRAPH_EDGE_NAME wt
%define GRAPH_EDGE_TYPE SHORT
--SHORT and BYTE types must be passed as INTEGER
--into routines
%define GRAPH_EDGE_VTYPE INTEGER


--graph type
%mode push
%mode string QQQ "`" "`" "\\"

--type definition for nodes
%define graph_type_define(parent) `TYPE
  GRAPH_ADJ_TYPE FROM parent = STRUCTURE
    GRAPH_NODE_NAME : GRAPH_NODE_TYPE
    GRAPH_EDGE_NAME : GRAPH_EDGE_TYPE
  ENDSTRUCTURE

  GRAPH_TYPE FROM parent = STRUCTURE
    --edges
    adj : ARRAY[MAX_NEIGHBORS] OF GRAPH_ADJ_TYPE
  ENDSTRUCTURE
  `

--MUST DEFINE for creating new nodes
%define define_new_node_hdr(parent) `declare_member(parent,new_node,parent,nnde)
ROUTINE new_node(id : INTEGER) : GRAPH_ADJ_TYPE FROM parent
`
%define define_new_node(parent) `declare_member(parent,new_node,parent,nnde)
ROUTINE new_node(id : INTEGER) : GRAPH_ADJ_TYPE
  VAR
    nde : GRAPH_ADJ_TYPE
  BEGIN
    nde.GRAPH_NODE_NAME = id ;
    nde.GRAPH_EDGE_NAME = 0 ;
    RETURN( nde )
  END new_node
  `

%define define_add_edge_hdr(parent) `declare_member(parent,addEdge,parent,aedg)
ROUTINE addEdge(prnt_nde : GRAPH_ADJ_TYPE; child_nde : GRAPH_ADJ_TYPE; wt : GRAPH_EDGE_VTYPE) FROM parent
`
%define define_add_edge(parent) `declare_member(parent,addEdge,parent,aedg)
ROUTINE addEdge(prnt_nde : GRAPH_ADJ_TYPE; child_nde : GRAPH_ADJ_TYPE; wt : GRAPH_EDGE_VTYPE)
  BEGIN
    --add weight
    child_nde.GRAPH_EDGE_NAME = wt
    append_adj((prnt_nde.GRAPH_NODE_NAME), child_nde)
    --directional graph
    IF NOT this.directional THEN
      --add weight
      prnt_nde.GRAPH_EDGE_NAME = wt
      append_adj((child_nde.GRAPH_NODE_NAME), prnt_nde)
    ENDIF

  END addEdge
  `

%mode pop



--objects needed for astar search
-- ******************
%define INCLUDE_A_STAR
-- (remove 'INCLUDE_A_STAR' if you want to
-- exclude it)
-- -----------------------
--priority queue for frontier
%define FRONTIER_NAME frntr
--queue definitions
%include default_priority.klt
%defeval QUEUE_INDEX_TYPE GRAPH_NODE_VTYPE
%defeval QUEUE_PRIORITY_TYPE GRAPH_NODE_VTYPE

--priority queue
%mode push
%mode string QQQ "`" "`" "\\"
%define queue_type_define(parent) `TYPE
  QUEUETYPE FROM parent = STRUCTURE
    QUEUE_INDEX_NAME : GRAPH_NODE_TYPE
    QUEUE_PRIORITY_NAME : GRAPH_EDGE_TYPE
  ENDSTRUCTURE
  `

--object for priority queue
%define define_priority_queue(object_name,cnfg_file) `%class object_name('priority_queue.klc','priority_queue.klh','cnfg_file')`

%mode pop

-- -----------------------
%include hashpath.klt
--linear hash for tracking path
%define PATH_TRACK_NAME ptrck

%defeval hashname h_trck
%defeval hval_def t_track
%defeval hval_type t_track

%mode push
%mode string QQQ "`" "`" "\\"
%define hash_type_define(parent) `TYPE
  hval_type FROM parent = STRUCTURE
    prev_node : GRAPH_NODE_TYPE
    cost_so_far : GRAPH_EDGE_TYPE
  ENDSTRUCTURE`

--object for linear hashes
%define define_tracking_dict(object_name,cnfg_file) `%class object_name('hashpath.klc','hashpath.klh','cnfg_file')`

%mode pop

-- ******************
