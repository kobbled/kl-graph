%ifndef graph_private_h
%define graph_private_h

--oop
%include namespace.m
declare_member(class_name,clear_graph,class_name,cgrh)
ROUTINE clear_graph FROM class_name
declare_member(class_name,clear_visited,class_name,cvis)
ROUTINE clear_visited FROM class_name
declare_member(class_name,reset_visited,class_name,rvis)
ROUTINE reset_visited FROM class_name
%ifdef GRAPH_EDGE_NAME
declare_member(class_name,clear_tracked,class_name,ctrk)
ROUTINE clear_tracked FROM class_name
declare_member(class_name,init_tracked,class_name,itrk)
ROUTINE init_tracked FROM class_name
declare_member(class_name,min_tracked,class_name,mtrk)
ROUTINE min_tracked(adj_arr : ADJ_ARR_TYPE) : INTEGER FROM class_name
%endif
declare_member(class_name,append_adj,class_name,aadj)
ROUTINE append_adj(id : INTEGER; data : GRAPH_ADJ_TYPE) FROM class_name
declare_member(class_name,DFSUtil,class_name,dfsu)
ROUTINE DFSUtil(nde : INTEGER; grph : PATH pathheader = hdr_graph, nodedata = GRAPH_TYPE ; & 
                   vistd : PATH nodedata = t_BOOL ; &
                   out_pth : PATH nodedata = t_INTEGER) FROM class_name
%ifdef INCLUDE_A_STAR
declare_member(class_name,reconstruct_path,class_name,rpth)
ROUTINE reconstruct_path(final_node : INTEGER; pth : PATH nodedata = t_INTEGER) FROM class_name
%endif

%endif --graph_private_h