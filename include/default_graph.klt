%define CONFIG_FILENAME default_graph.klt
--maximum number of adjacencies per node
%define MAX_NEIGHBORS 5

%define GRAPH_TYPE t_graph
%define GRAPH_NODE_NAME id
%define GRAPH_NODE_TYPE SHORT

%define GRAPH_ADJ_TYPE t_edge


--graph type
%mode push
%mode string QQQ "`" "`" "\\"

--type definition for nodes
%define graph_type_define(parent) `TYPE
  GRAPH_ADJ_TYPE FROM parent = STRUCTURE
    GRAPH_NODE_NAME : GRAPH_NODE_TYPE
  ENDSTRUCTURE

  GRAPH_TYPE FROM parent = STRUCTURE
    --edges
    adj : ARRAY[MAX_NEIGHBORS] OF GRAPH_ADJ_TYPE
  ENDSTRUCTURE
  `

--MUST DEFINE for creating new nodes
%define define_new_node_hdr(parent) `declare_member(parent,new_node,parent,nnde)
ROUTINE new_node(id : INTEGER) : GRAPH_ADJ_TYPE FROM parent
`
%define define_new_node(parent) `declare_member(parent,new_node,parent,nnde)
ROUTINE new_node(id : INTEGER) : GRAPH_ADJ_TYPE
  VAR
    nde : GRAPH_ADJ_TYPE
  BEGIN
    nde.GRAPH_NODE_NAME = id ;
    RETURN( nde )
  END new_node
  `

%define define_add_edge_hdr(parent) `declare_member(parent,addEdge,parent,aedg)
ROUTINE addEdge(prnt_nde : GRAPH_ADJ_TYPE; child_nde : GRAPH_ADJ_TYPE) FROM parent
`
%define define_add_edge(parent) `declare_member(parent,addEdge,parent,aedg)
declare_member(parent,append_adj,parent,aadj)
ROUTINE addEdge(prnt_nde : GRAPH_ADJ_TYPE; child_nde : GRAPH_ADJ_TYPE)
  BEGIN
    append_adj((prnt_nde.GRAPH_NODE_NAME), child_nde)
    --directional graph
    IF NOT this.directional THEN
      append_adj((child_nde.GRAPH_NODE_NAME), prnt_nde)
    ENDIF

  END addEdge
  `

%mode pop
