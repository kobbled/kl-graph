PROGRAM test_graph
%NOLOCKGROUP

%include systemlib.types.klt
%include graph.klt

--normal graph
%include default_graph.klt
graph_type_define(tstgph)

--weighted graph
%include default_graph_wt_astar.klt
graph_type_define(tstwt)

VAR
  search_path : PATH nodedata = t_INTEGER
  bfsqueue : PATH nodedata = t_INTEGER

%include kunit.klh

--normal graph
%class tstgph('graph.klc','graph.klh','default_graph.klt')
--need to define to add adjacency
%include default_graph.klt
define_graphs_headers(tstgph)

--weighted graph
%class tstwt('graph.klc','graph.klh','default_graph_wt_astar.klt')
%include default_graph_wt_astar.klt
define_graphs_headers(tstwt)


ROUTINE clear_search
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(search_path)
    WHILE PATH_LEN(search_path) > 0 DO
		  DELETE_NODE(search_path,i,status)
      i = i - 1
	  ENDWHILE
  END clear_search


--   (1)-------(2) 
--    |       / | \ 
--    |    /    | (5)
--    |  /      | / 
--   (4)------(3)
ROUTINE t_make_graph : BOOLEAN
  VAR
    i : INTEGER
    nde : ARRAY[5] OF t_edge
    b : ARRAY[2] OF BOOLEAN
    n : ARRAY[MAX_NEIGHBORS] OF INTEGER
    exp_n : ARRAY[MAX_NEIGHBORS] OF INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(nde) DO
      nde[i] = tstgph__new_node(i)
    ENDFOR
    tstgph__new(ARRAY_LEN(nde),FALSE)
    tstgph__addEdge(nde[1], nde[2] )
    tstgph__addEdge(nde[1], nde[4] )
    tstgph__addEdge(nde[2], nde[3] )
    tstgph__addEdge(nde[2], nde[4] )
    tstgph__addEdge(nde[3], nde[4] )
    tstgph__addEdge(nde[2], nde[5] )
    tstgph__addEdge(nde[5], nde[3] )

    b[1] = tstgph__is_neighbor(1,2)
    b[2] = tstgph__is_neighbor(1,3)

    n = tstgph__list_neighbors(2)
    n[5] = 0
    --expected neighbors
    exp_n[1] = 1 ; exp_n[2] = 3 ; exp_n[3] = 4;
    exp_n[4] = 5 ; exp_n[5] = 0 ;

    RETURN(kunit_assert(b[1]) AND (NOT kunit_assert(b[2])) AND &
           kunit_eq_ari(exp_n, n) )
  END t_make_graph


--   ---(1)----->(2)
--   |   ^        |
--   |   |        v
--   |->(3)      (4)

ROUTINE t_dfs : BOOLEAN
  VAR
    i : INTEGER
    nde : ARRAY[4] OF t_edge
  BEGIN
    clear_search

    FOR i=1 TO ARRAY_LEN(nde) DO
      nde[i] = tstgph__new_node(i)
    ENDFOR
    
    tstgph__new(ARRAY_LEN(nde),TRUE)
    tstgph__addEdge(nde[1], nde[2] )
    tstgph__addEdge(nde[1], nde[3] )
    tstgph__addEdge(nde[3], nde[1] )
    tstgph__addEdge(nde[2], nde[4] )
    tstgph__addEdge(nde[4], nde[4] )
    
    tstgph__DFS(0, search_path)
    --dfs: 1-2-4-3

    RETURN(kunit_eq_int(1, (search_path[1].v)) AND kunit_eq_int(2, (search_path[2].v)) AND &
           kunit_eq_int(4, (search_path[3].v)) AND kunit_eq_int(3, (search_path[4].v)) )
  END t_dfs

--   (1)-------(2) 
--    |       / | \ 
--    |    /    | (5)
--    |  /      | / 
--   (4)------(3)
ROUTINE t_bfs : BOOLEAN
  VAR
    i : INTEGER
    nde : ARRAY[5] OF t_edge
  BEGIN
    clear_search

    FOR i=1 TO ARRAY_LEN(nde) DO
      nde[i] = tstgph__new_node(i)
    ENDFOR
    tstgph__new(ARRAY_LEN(nde),FALSE)
    tstgph__addEdge(nde[1], nde[2] )
    tstgph__addEdge(nde[1], nde[4] )
    tstgph__addEdge(nde[2], nde[3] )
    tstgph__addEdge(nde[2], nde[4] )
    tstgph__addEdge(nde[3], nde[4] )
    tstgph__addEdge(nde[2], nde[5] )
    tstgph__addEdge(nde[5], nde[3] )

    tstgph__BFS(0, 0, bfsqueue, search_path)
    --bfs 1-2-4-3-5

    RETURN(kunit_eq_int(1, (search_path[1].v)) AND kunit_eq_int(2, (search_path[2].v)) AND &
           kunit_eq_int(4, (search_path[3].v)) AND kunit_eq_int(3, (search_path[4].v)) AND &
           kunit_eq_int(5, (search_path[5].v)) )

  END t_bfs

--    /(2)--8--(3)--7--(4)\  
--   4  |       |2 \    |  9
--  /   |       |   \   |   \
-- (1)  11   /-(9)   4  14  (5)
--  \   |   7   |6    \ |   /
--   8  | /     |      \|  10
--    \(8)--1--(7)--2--(6)/
ROUTINE t_dijkstra : BOOLEAN
  VAR
    i : INTEGER
    nde : ARRAY[9] OF t_edge_wt
    wts : ARRAY[9] OF INTEGER
    act_pth1 : ARRAY[5] OF INTEGER
    exp_pth1 : ARRAY[5] OF INTEGER
    act_pth2 : ARRAY[5] OF INTEGER
    exp_pth2 : ARRAY[5] OF INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(nde) DO
      nde[i] = tstwt__new_node(i)
    ENDFOR

    tstwt__new(ARRAY_LEN(nde),FALSE)
    tstwt__addEdge(nde[1], nde[2], 4)
    tstwt__addEdge(nde[2], nde[3], 8)
    tstwt__addEdge(nde[3], nde[4], 7)
    tstwt__addEdge(nde[3], nde[9], 2)
    tstwt__addEdge(nde[3], nde[6], 4)
    tstwt__addEdge(nde[4], nde[5], 9)
    tstwt__addEdge(nde[4], nde[6], 14)
    tstwt__addEdge(nde[5], nde[6], 10)
    tstwt__addEdge(nde[6], nde[7], 2)
    tstwt__addEdge(nde[7], nde[8], 1)
    tstwt__addEdge(nde[7], nde[9], 6)
    tstwt__addEdge(nde[8], nde[2], 11)
    tstwt__addEdge(nde[8], nde[9], 7)
    tstwt__addEdge(nde[8], nde[1], 8)
    
    --path 1
    clear_search
    tstwt__dijkstra_search(1, 5, search_path)
    FOR i=1 TO ARRAY_LEN(act_pth1) DO
      act_pth1[i] = search_path[i].v
    ENDFOR
    --expected path
    exp_pth1[1] = 1 ; exp_pth1[2] = 8 ; exp_pth1[3] = 7 ;
    exp_pth1[4] = 6 ; exp_pth1[5] = 5 ;

    --path 2
    clear_search
    tstwt__dijkstra_search(8, 4, search_path)
    FOR i=1 TO ARRAY_LEN(act_pth2) DO
      act_pth2[i] = search_path[i].v
    ENDFOR
    --expected path
    exp_pth2[1] = 8 ; exp_pth2[2] = 7 ; exp_pth2[3] = 6 ;
    exp_pth2[4] = 3 ; exp_pth2[5] = 4 ;


    RETURN(kunit_eq_ari(exp_pth1, act_pth1) AND kunit_eq_ari(exp_pth2, act_pth2) )
  END t_dijkstra

--    /(2)--8--(3)--7--(4)\  
--   4  |       |2 \    |  9
--  /   |       |   \   |   \
-- (1)  11   /-(9)   4  14  (5)
--  \   |   7   |6    \ |   /
--   8  | /     |      \|  10
--    \(8)--1--(7)--2--(6)/
ROUTINE t_MST : BOOLEAN
  VAR
    i : INTEGER
    nde : ARRAY[9] OF t_edge_wt
    act_pth, exp_pth : ARRAY[9] OF INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(nde) DO
      nde[i] = tstwt__new_node(i)
    ENDFOR

    tstwt__new(ARRAY_LEN(nde),FALSE)
    tstwt__addEdge(nde[1], nde[2], 4)
    tstwt__addEdge(nde[2], nde[3], 8)
    tstwt__addEdge(nde[3], nde[4], 7)
    tstwt__addEdge(nde[3], nde[9], 2)
    tstwt__addEdge(nde[3], nde[6], 4)
    tstwt__addEdge(nde[4], nde[5], 9)
    tstwt__addEdge(nde[4], nde[6], 14)
    tstwt__addEdge(nde[5], nde[6], 10)
    tstwt__addEdge(nde[6], nde[7], 2)
    tstwt__addEdge(nde[7], nde[8], 1)
    tstwt__addEdge(nde[7], nde[9], 6)
    tstwt__addEdge(nde[8], nde[2], 11)
    tstwt__addEdge(nde[8], nde[9], 7)
    tstwt__addEdge(nde[8], nde[1], 8)

    clear_search
    tstwt__MST(1, search_path)

    FOR i=1 TO ARRAY_LEN(act_pth) DO
      act_pth[i] = search_path[i].v
    ENDFOR
    --expected path
    exp_pth[1] = 1 ; exp_pth[2] = 2 ; exp_pth[3] = 3 ;
    exp_pth[4] = 9 ; exp_pth[5] = 7 ; exp_pth[6] = 8 ;
    exp_pth[7] = 6 ; exp_pth[8] = 5 ; exp_pth[9] = 4 ;

    RETURN(kunit_eq_ari(exp_pth, act_pth))

  END t_MST

BEGIN
  --total asserts 15
  kunit_test('create a graph', t_make_graph) --asserts 3
  kunit_test('test DFS', t_dfs) --asserts 4
  kunit_test('test BFS', t_bfs) --asserts 5
  kunit_test('test dijkstra search', t_dijkstra) --asserts 2
  kunit_test('prims MST', t_MST) --asserts 1
  kunit_done

  --destruct classes
  tstgph__destructor
END test_graph