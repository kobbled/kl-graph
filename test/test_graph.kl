PROGRAM test_graph
%NOLOCKGROUP

%include systemlib.klt
path_default_types
%include graph.klt

--normal graph
%include default_graph.klt
graph_type_define(tstgph)

--weighted graph
%include default_graph_weight.klt
graph_type_define(tstwt)

VAR
  search_path : PATH nodedata = t_INTEGER
  bfsqueue : PATH nodedata = t_INTEGER

%include kunit.klh

--normal graph
%class tstgph('graph.klc','graph.klh','default_graph.klt')
--need to define to add adjacency
%include default_graph.klt
define_new_node(tstgph)

--weighted graph
%class tstwt('graph.klc','graph.klh','default_graph_weight.klt')
%include default_graph_weight.klt
define_new_node(tstwt)


ROUTINE clear_search
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(search_path)
    WHILE PATH_LEN(search_path) > 0 DO
		  DELETE_NODE(search_path,i,status)
      i = i - 1
	  ENDWHILE
  END clear_search


--   (1)-------(2) 
--    |       / | \ 
--    |    /    | (5)
--    |  /      | / 
--   (4)------(3)
ROUTINE t_make_graph : BOOLEAN
  VAR
    i : INTEGER
    nde : ARRAY[5] OF t_edge
    b : ARRAY[2] OF BOOLEAN
    n : ARRAY[MAX_NEIGHBORS] OF INTEGER
    exp_n : ARRAY[MAX_NEIGHBORS] OF INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(nde) DO
      nde[i] = tstgph__new_node(i)
    ENDFOR
    tstgph__new(ARRAY_LEN(nde),FALSE)
    tstgph__addEdge(nde[1], nde[2] )
    tstgph__addEdge(nde[1], nde[4] )
    tstgph__addEdge(nde[2], nde[3] )
    tstgph__addEdge(nde[2], nde[4] )
    tstgph__addEdge(nde[3], nde[4] )
    tstgph__addEdge(nde[2], nde[5] )
    tstgph__addEdge(nde[5], nde[3] )

    b[1] = tstgph__is_neighbor(1,2)
    b[2] = tstgph__is_neighbor(1,3)

    n = tstgph__list_neighbors(2)
    n[5] = 0
    --expected neighbors
    exp_n[1] = 1 ; exp_n[2] = 3 ; exp_n[3] = 4;
    exp_n[4] = 5 ; exp_n[5] = 0 ;

    RETURN(kunit_assert(b[1]) AND (NOT kunit_assert(b[2])) AND &
           kunit_eq_ari(exp_n, n) )
  END t_make_graph


--   ---(1)----->(2)
--   |   ^        |
--   |   |        v
--   |->(3)      (4)

ROUTINE t_dfs : BOOLEAN
  VAR
    i : INTEGER
    nde : ARRAY[4] OF t_edge
  BEGIN
    clear_search

    FOR i=1 TO ARRAY_LEN(nde) DO
      nde[i] = tstgph__new_node(i)
    ENDFOR
    
    tstgph__new(ARRAY_LEN(nde),TRUE)
    tstgph__addEdge(nde[1], nde[2] )
    tstgph__addEdge(nde[1], nde[3] )
    tstgph__addEdge(nde[3], nde[1] )
    tstgph__addEdge(nde[2], nde[4] )
    tstgph__addEdge(nde[4], nde[4] )
    
    tstgph__DFS(0, search_path)
    --dfs: 1-2-4-3

    RETURN(kunit_eq_int(1, (search_path[1].v)) AND kunit_eq_int(2, (search_path[2].v)) AND &
           kunit_eq_int(4, (search_path[3].v)) AND kunit_eq_int(3, (search_path[4].v)) )
  END t_dfs

--   (1)-------(2) 
--    |       / | \ 
--    |    /    | (5)
--    |  /      | / 
--   (4)------(3)
ROUTINE t_bfs : BOOLEAN
  VAR
    i : INTEGER
    nde : ARRAY[5] OF t_edge
  BEGIN
    clear_search

    FOR i=1 TO ARRAY_LEN(nde) DO
      nde[i] = tstgph__new_node(i)
    ENDFOR
    tstgph__new(ARRAY_LEN(nde),FALSE)
    tstgph__addEdge(nde[1], nde[2] )
    tstgph__addEdge(nde[1], nde[4] )
    tstgph__addEdge(nde[2], nde[3] )
    tstgph__addEdge(nde[2], nde[4] )
    tstgph__addEdge(nde[3], nde[4] )
    tstgph__addEdge(nde[2], nde[5] )
    tstgph__addEdge(nde[5], nde[3] )

    tstgph__BFS(0, 0, bfsqueue, search_path)
    --bfs 1-2-4-3-5

    RETURN(kunit_eq_int(1, (search_path[1].v)) AND kunit_eq_int(2, (search_path[2].v)) AND &
           kunit_eq_int(4, (search_path[3].v)) AND kunit_eq_int(3, (search_path[4].v)) AND &
           kunit_eq_int(5, (search_path[5].v)) )

  END t_bfs

--   (1)---10---(2) 
--    |       /  | \ 3
--    2    10    7 (5)
--    |  /       | / 2
--   (4)----6---(3)

BEGIN
  --total asserts 12
  kunit_test('create a graph', t_make_graph) --asserts 3
  kunit_test('test DFS', t_dfs) --asserts 4
  kunit_test('test BFS', t_bfs) --asserts 5
  kunit_done

  --destruct classes
  tstgph__destructor
END test_graph